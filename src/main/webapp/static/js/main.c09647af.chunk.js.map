{"version":3,"sources":["logo.svg","AnimalRow.js","AddAnimalForm.js","AnimalsTable.js","App.js","SearchByName.js","FilterAnimals.js","serviceWorker.js","UpdateAnimal.js","index.js"],"names":["module","exports","AnimalRow","props","singleAnimal","animal_id","name","color","to","AddAnimalForm","useState","formData","setFormData","inputChangeHandler","e","target","value","onSubmit","preventDefault","onAddAnimalProp","type","id","onChange","AnimalsTable","animals","setAnimals","useEffect","promise","axios","get","then","resp","animalsFromResponse","data","catch","alert","border","map","a","key","f","post","App","SearchByName","placeholder","searchHandlerProp","FilterAnimals","filteredAnimals","setFilteredAnimals","length","searchParam","filter","toLowerCase","includes","Boolean","window","location","hostname","match","UpdateAnimal","animalid","params","animalDetails","setAnimalDetails","onChangeHandler","url","put","routing","basename","path","component","exact","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.c09647af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst AnimalRow = (props) => {\r\n    return (\r\n        <>\r\n        <tr>\r\n            <td>{props.singleAnimal.animal_id}</td>\r\n            <td>{props.singleAnimal.name}</td>\r\n            <td>{props.singleAnimal.color}</td>\r\n            <td><Link to ={`/update/${props.singleAnimal.animal_id}`}>Update</Link> </td>\r\n        </tr>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AnimalRow;","import React, { useState } from 'react';\r\n\r\nconst AddAnimalForm = (props) => {\r\n\r\n    const[formData, setFormData] = useState({name: \"\", color: \"\"});\r\n\r\n    // Every time input changes, call this function.\r\n    // It changes the state of the formData.\r\n    const inputChangeHandler = (e) => {\r\n        // E.target returnt name and value, using destructuring we save them into name and value vars.\r\n        const{name, value} = e.target;\r\n        // We onlt change state by using setters.\r\n        setFormData(\r\n            {\r\n                // take formData object we have now...\r\n                ...formData,\r\n                // ...and update the [name] property to value\r\n                // [name] is a plcaeholder to the actual name from e/target so for our example it would be either\r\n                // name or age, depending ont the input field 9target0\r\n                [name] : value\r\n            }\r\n        )\r\n    }\r\n\r\n    // In <form> we said to call this function when form is submitted.\r\n    const formSubmit = (e) => {\r\n        e.preventDefault();\r\n        // Call onAddAnimalHandler function.\r\n        //It was passed with props from animalsTable cominent. the name we used to sent it: onAnimalProp\r\n        props.onAddAnimalProp(formData);\r\n        // Make input fields empty by setting formData propertied to \"\".\r\n        setFormData({name: \"\", color: \"\"});\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <h1>Insert Your Animal Here:</h1>\r\n\r\n        <form onSubmit = {formSubmit}>\r\n            <input type = \"text\" name = \"name\" id = \"name\" value = {formData.name} onChange = {inputChangeHandler}/> <br />\r\n            <input type = \"text\" name = \"color\" id = \"color\" value = {formData.color} onChange = {inputChangeHandler} /><br />\r\n            <input type = \"submit\" value = \"Add Animal\" />\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddAnimalForm;","import React, { useEffect, useState } from 'react';\r\nimport AnimalRow from './AnimalRow';\r\nimport axios from 'axios';\r\nimport AddAnimalForm from './AddAnimalForm';\r\n\r\nconst AnimalsTable = () => {\r\n    // Destructuring operator.\r\n    const [animals, setAnimals] = useState ([]);\r\n\r\n    useEffect(() => {\r\n        let promise = axios.get('http://3.22.154.79:8080/mvc-1.0.0/animalapi');\r\n\r\n        promise.then(resp => {\r\n            // Resp.data - data from the response, array of animals.\r\n            const animalsFromResponse = resp.data;\r\n            // Instead of animals(From like 6) = animalsFromResponse, we must do the following:\r\n            setAnimals(animalsFromResponse);\r\n        });\r\n\r\n        promise.catch((resp) => {\r\n            alert(\"Promise Failed! :(\");\r\n        })\r\n\r\n    }, []);\r\n\r\n    const onAddAnimalHandler = (f) => {\r\n        let promise = axios.post('http://3.22.154.79:8080/mvc-1.0.0/animalapi', f);\r\n        promise.then(resp => {\r\n            setAnimals([...animals, resp.data]);\r\n        });\r\n        promise.catch(() => {\r\n            alert(\"Add Animal Failed\");\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <h1>All Animals</h1>\r\n        <table border = \"2\">\r\n            <thead><tr>\r\n                <th>Animal Id</th>\r\n                <th>Animal Name</th>\r\n                <th>Animal Color</th>\r\n                <th>Actions</th>\r\n                </tr></thead>\r\n            <tbody>\r\n                {\r\n                    // Display a row for each animal from array.\r\n                    animals.map(a =>\r\n                        <AnimalRow singleAnimal = {a} key ={a.animal_id}/>\r\n                    )\r\n                \r\n                }\r\n            </tbody>\r\n        </table>\r\n        <h2>Animal Dropdown</h2>\r\n                    <select>\r\n                        {\r\n                            animals.map(\r\n                                a =>\r\n                                <option value = {a.animal_id} >{a.name}</option>\r\n                            )\r\n                        }\r\n                    </select>\r\n\r\n        <AddAnimalForm onAddAnimalProp = {onAddAnimalHandler} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AnimalsTable;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AnimalsTable from './AnimalsTable';\n\nfunction App() {\n  return (\n    <>\n    <h1>Hello</h1>\n    <AnimalsTable/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nconst SearchByName = (props) => {\r\n\r\n    const onInputChange = (e) => {\r\n        props.searchHandlerProp(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <h2>Search By Name</h2>\r\n        <form>\r\n            <input type = \"text\" placeholder = \"Enter Animal Name\" onChange = {onInputChange}/>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchByName;","import React, { useEffect, useState } from 'react';\r\nimport AnimalRow from './AnimalRow';\r\nimport axios from 'axios';\r\nimport SearchByName from './SearchByName';\r\n\r\nconst FilterAnimals = () => {\r\n    // Destructuring operator.\r\n    const [animals, setAnimals] = useState ([]);\r\n    const [filteredAnimals, setFilteredAnimals] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let promise = axios.get('http://3.22.154.79:8080/mvc-1.0.0/animalapi');\r\n\r\n        promise.then(resp => {\r\n            // Resp.data - data from the response, array of animals.\r\n            const animalsFromResponse = resp.data;\r\n            // Instead of animals(From like 6) = animalsFromResponse, we must do the following:\r\n            setAnimals(animalsFromResponse);\r\n            setFilteredAnimals(animalsFromResponse);\r\n        });\r\n\r\n        promise.catch((resp) => {\r\n            alert(\"Promise Failed! :(\");\r\n        })\r\n\r\n    }, []);\r\n\r\n    const searchHandler = (searchParam) => {\r\n        setFilteredAnimals(\r\n            (animals.filter(a => \r\n                a.name.toLowerCase().includes(searchParam.toLowerCase())))\r\n        )\r\n    }\r\n\r\n    /* \r\n        if(true) return (exampleTrue)\r\n        else return (exampleFalse)\r\n    */\r\n\r\n    return (\r\n        <>\r\n        {\r\n        filteredAnimals.length > 0 ?\r\n        <h1>All Animals</h1> :\r\n        <h1>No Animals found :(</h1>\r\n        }\r\n        <table border = \"2\">\r\n            <thead><tr>\r\n                <th>Animal Id</th>\r\n                <th>Animal Name</th>\r\n                <th>Animal Color</th>\r\n                <th>Actions</th>\r\n                </tr></thead>\r\n            <tbody>\r\n                {\r\n                    // Display a row for each animal from array.\r\n                    filteredAnimals.map(a =>\r\n                        <AnimalRow singleAnimal = {a} key ={a.animal_id}/>\r\n                    )\r\n                \r\n                }\r\n            </tbody>\r\n        </table>\r\n        <SearchByName searchHandlerProp = {searchHandler}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FilterAnimals;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport {useState, useEffect} from 'react';\r\n\r\nconst UpdateAnimal = (props) => {\r\n\r\n    let animalid = props.match.params.animalid;\r\n    const [animalDetails, setAnimalDetails] = useState({});\r\n\r\n    const onChangeHandler = (e) => {\r\n        const {name,value} = e.target;\r\n        setAnimalDetails({...animalDetails, [name]: value})\r\n    }\r\n\r\n    useEffect(() => {\r\n        let url = \"http://3.22.154.79:8080/mvc-1.0.0/animalapi?id=\" + animalid;\r\n        let promise = axios.get(url);\r\n        promise.then(resp => {\r\n            setAnimalDetails(resp.data);\r\n        });\r\n        promise.catch(function (resp) {\r\n            alert(\"Promise Failed\");\r\n        })\r\n    }, []);\r\n\r\n    const onFormSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n        let promise = axios.put(\"http://3.22.154.79:8080/mvc-1.0.0/animalapi\", animalDetails);\r\n        promise.then(resp =>{\r\n            alert(\"Animal has been updated.\")\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Your Animal:</h2>\r\n            <p>{animalDetails.animal_id} | {animalDetails.name} | {animalDetails.color}</p>\r\n\r\n            <h2>Update The Animal</h2>\r\n            <form onSubmit = {onFormSubmitHandler}>\r\n                <input type = \"text\" name = \"name\" id = \"name\" value = {animalDetails.name} onChange = {onChangeHandler}/> <br/>\r\n                <input type = \"text\" name = \"color\" id = \"color\" value = {animalDetails.color} onChange = {onChangeHandler}/> <br/>\r\n                <input type = \"submit\" value = \"Update Animal\" /> <br/>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UpdateAnimal;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport FilterAnimals from './FilterAnimals';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport UpdateAnimal from './UpdateAnimal';\n\nconst routing = (\n  <BrowserRouter basename = {'/mvc-1.0.0'}>\n      <Route path = \"/\" component = {App} exact />\n      {/* :animalid is a parameter, we will frab it by using props.match.params.animalid */}\n      <Route path = \"/update/:animalid\" component = {UpdateAnimal} />\n      <Route path = \"/filter\" component = {FilterAnimals}/>\n  </BrowserRouter>\n)\n\nReactDOM.render(\n    routing,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}